name: Snyk PR Check

# Trigger the workflow on pull request events
on: [pull_request]

jobs:
  snyk-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for Elixir files
        id: check-elixir
        run: |
          if ls *.ex* 1> /dev/null 2>&1; then
            echo "found=true" >> $GITHUB_ENV
          else
            echo "found=false" >> $GITHUB_ENV
          fi

      # - name: Run Sobelow Action
      #   if: env.found == 'true'
      #   uses: ./.github/sobelow
      #   with:
      #     working-directory: .
      #   continue-on-error: true

      - name: Run Snyk Test
        if: env.found == 'true'
        uses: ./.github/snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --org=security-sandbox --json > snyk-test-report.json
          working-directory: .
        continue-on-error: true

      - name: Upload Snyk Test Report
        if: env.found == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: snyk-test-report
          path: snyk-test-report.json

      # - name: Snyk Open Source monitor
      #   if: env.found == 'true'
      #   uses: ./.github/snyk
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     command: monitor
      #     args: --org=security-sandbox --json > snyk-monitor-report.json
      #   continue-on-error: true

      # - name: Upload Snyk Monitor Report
      #   if: env.found == 'true'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: snyk-monitor-report
      #     path: snyk-monitor-report.json

      - name: Create Check Run
        if: env.found == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'snyk-test-report.json';

            if (!fs.existsSync(path)) {
              throw new Error(`File ${path} does not exist.`);
            }

            const report = fs.readFileSync(path, 'utf-8');
            const data = JSON.parse(report);
            const vulnerabilities = data.vulnerabilities || [];

            // Function to generate the HTML table for vulnerabilities
            function generateVulnerabilitiesTable(data) {
              if (!Array.isArray(data.vulnerabilities) || data.vulnerabilities.length === 0) {
                return '<p>No vulnerabilities found.</p>';
              }

              // Get headers from the keys of the first vulnerability object
              const headers = Object.keys(data.vulnerabilities[0]);

              let table = `<table>
                <thead>
                  <tr>`;
              headers.forEach(header => {
                table += `<th>${header}</th>`;
              });
              table += `</tr>
                </thead>
                <tbody>`;

              data.vulnerabilities.forEach(vuln => {
                table += `<tr>`;
                headers.forEach(header => {
                  table += `<td>${vuln[header] || ''}</td>`;
                });
                table += `</tr>`;
              });

              table += `</tbody>
              </table>`;

              return table;
            }

            // Function to generate the HTML table for severity counts
            function generateSeverityTable(data) {
              const severityCounts = {
                critical: 0,
                high: 0,
                medium: 0,
                low: 0
              };

              if (Array.isArray(data.vulnerabilities)) {
                data.vulnerabilities.forEach(vuln => {
                  if (severityCounts[vuln.severity] !== undefined) {
                    severityCounts[vuln.severity]++;
                  }
                });
              }

              let table = `<table>
                <thead>
                  <tr>
                    <th>Severity</th>
                    <th>Count</th>
                  </tr>
                </thead>
                <tbody>`;

              for (const [severity, count] of Object.entries(severityCounts)) {
                table += `<tr>
                  <td>${severity}</td>
                  <td>${count}</td>
                </tr>`;
              }

              table += `</tbody>
              </table>`;

              return table;
            }

            const vulnerabilitiesTableHTML = generateVulnerabilitiesTable(data);
            const severityTableHTML = generateSeverityTable(data);

            const checkRun = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Snyk Vulnerability Findings Check',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: vulnerabilities.length > 0 ? 'failure' : 'success',
              output: {
                title: 'Snyk Vulnerability Findings Report',
                summary: severityTableHTML,
                text: vulnerabilitiesTableHTML
              }
            });

            console.log('Check run created:', checkRun.data);


        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}