name: Snyk PR Check

# Trigger the workflow on pull request events
on: [pull_request]

jobs:
  snyk-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for Elixir files
        id: check-elixir
        run: |
          if ls *.ex* 1> /dev/null 2>&1; then
            echo "found=true" >> $GITHUB_ENV
          else
            echo "found=false" >> $GITHUB_ENV
          fi

      - name: Run Sobelow Action
        if: env.found == 'true'
        uses: ./.github/sobelow
        with:
          working-directory: .
        continue-on-error: true

      - name: Run Snyk Test
        if: env.found == 'true'
        uses: ./.github/snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --org=security-sandbox --json > snyk-test-report.json
          working-directory: .
        continue-on-error: true

      - name: Upload Snyk Test Report
        if: env.found == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: snyk-test-report
          path: snyk-test-report.json

      # - name: Snyk Open Source monitor
      #   if: env.found == 'true'
      #   uses: ./.github/snyk
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     command: monitor
      #     args: --org=security-sandbox --json > snyk-monitor-report.json
      #   continue-on-error: true

      # - name: Upload Snyk Monitor Report
      #   if: env.found == 'true'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: snyk-monitor-report
      #     path: snyk-monitor-report.json

      - name: Create Check Run
        if: env.found == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'snyk-test-report.json'; // Path to the Snyk report
            # const snyk_monitor_file = 'snyk-monitor-report.json'; // Path to the Snyk report

            if (!fs.existsSync(path)) {
              throw new Error(`File ${path} does not exist.`);
            }

            const report = fs.readFileSync(path, 'utf-8');
            const data = JSON.parse(report);

            # const snyk_monitor_report = fs.readFileSync(snyk_monitor_file, 'utf-8');
            # const snyk_monitor_data = JSON.parse(snyk_monitor_report);

            // Adjust this based on the actual structure of the Snyk JSON report
            const vulnerabilities = data.vulnerabilities || [];

            // Function to generate the HTML table for vulnerabilities
            function generateVulnerabilitiesTable(data) {
              let table = `<table>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>CVSSv3</th>
                    <th>Credit</th>
                    <th>Semver</th>
                    <th>Exploit</th>
                    <th>Fixed In</th>
                    <th>Language</th>
                    <th>Severity</th>
                    <th>CVSS Score</th>
                    <th>Module Name</th>
                    <th>References</th>
                  </tr>
                </thead>
                <tbody>`;

              data.vulnerabilities.forEach(vuln => {
                table += `<tr>
                  <td>${vuln.id}</td>
                  <td>${vuln.title}</td>
                  <td>${vuln.CVSSv3}</td>
                  <td>${vuln.credit.join(', ')}</td>
                  <td>${vuln.semver.vulnerable.join(', ')}</td>
                  <td>${vuln.exploit}</td>
                  <td>${vuln.fixedIn.join(', ')}</td>
                  <td>${vuln.language}</td>
                  <td>${vuln.severity}</td>
                  <td>${vuln.cvssScore}</td>
                  <td>${vuln.moduleName}</td>
                  <td>${vuln.references.map(ref => `<a href="${ref.url}">${ref.title}</a>`).join(', ')}</td>
                </tr>`;
              });

              table += `</tbody>
              </table>`;

              return table;
            }

            // Function to generate the HTML table for severity counts
            function generateSeverityTable(data) {
              // Initialize severity counts with 0
              const severityCounts = {
                critical: 0,
                high: 0,
                medium: 0,
                low: 0
              };

              // Update counts based on actual data
              data.vulnerabilities.forEach(vuln => {
                if (severityCounts[vuln.severity] !== undefined) {
                  severityCounts[vuln.severity]++;
                }
              });

              let table = `<table>
                <thead>
                  <tr>
                    <th>Severity</th>
                    <th>Count</th>
                  </tr>
                </thead>
                <tbody>`;

              for (const [severity, count] of Object.entries(severityCounts)) {
                table += `<tr>
                  <td>${severity}</td>
                  <td>${count}</td>
                </tr>`;
              }

              table += `</tbody>
              </table>`;

              return table;
            }

            const vulnerabilitiesTableHTML = generateVulnerabilitiesTable(data);
            const severityTableHTML = generateSeverityTable(data);

            # const comment = `## Snyk Vulnerability Report\n\n### Found ${vulnerabilities.length} vulnerabilities:\n\n[View in Snyk](${snyk_monitor_data.uri})\n\n${vulnerabilitiesTableHTML}\n\n### Vulnerability Counts by Severity\n\n${severityTableHTML}`;

            const checkRun = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Snyk Vulnerability Findings Check',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: vulnerabilities.length > 0 ? 'failure' : 'success',
              output: {
                title: 'Snyk Vulnerability Findings Report',
                summary: comment,
                text: comment
              }
            });

            console.log('Check run created:', checkRun.data);



        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}